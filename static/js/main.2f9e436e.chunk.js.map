{"version":3,"sources":["quoteMachine/quotes.js","quoteMachine/reducer.js","configure-store.js","quoteMachine/component.js","quoteMachine/container.js","quoteMachine/actions.js","App.js","reportWebVitals.js","index.js"],"names":["quotes","quote","author","refreshIndex","Math","floor","random","length","Quote","index","store","createStore","state","action","type","console","log","color","randomColor","searchLink","Button","styled","button","props","BackgroundDiv","div","QuoteContainer","h1","Author","h2","LeftFontIconStyle","position","bottom","right","RightFontIconStyle","left","top","TwitterIconStyle","ToKnowMoreStyle","QuoteGenerator","this","tweetUrl","id","style","icon","size","onClick","handleRefreshClick","href","target","React","Component","Container","connect","dispatch","library","add","fas","fab","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f9e436e.chunk.js","sourcesContent":["const quotes = [{\r\n        quote: 'How lucky I am to have something that makes saying goodbye so hard.',\r\n        author: \"Winnie the Pooh\"\r\n    },\r\n    {\r\n        quote: 'Ideas are worthless. Execution is everything.',\r\n        author: \"Scott Adams\"\r\n    },\r\n    {\r\n        quote: 'The whole problem with the world is that fools and fanatics are always so certain of themselves, and wiser people so full of doubts.',\r\n        author: \"Bertrand Russell\"\r\n    },\r\n    {\r\n        quote: 'Human beings, who are almost unique in having the ability to learn from the experience of others, are also remarkable for their apparent disinclination to do so.',\r\n        author: \"Douglas Adams\"\r\n    },\r\n    {\r\n        quote: 'The best time to plant a tree was 20 years ago. The second best time is now.',\r\n        author: \"Chinese Proverb\"\r\n    },\r\n    {\r\n        quote: 'We stopped checking for monsters under our bed when we realized they\\'re inside us.',\r\n        author: \"The joker\"\r\n    },\r\n    {\r\n        quote: 'You have no responsibility to live up to what other people think you ought to accomplish. I have no responsibility to be like they expect me to be. It\\'s their mistake, not my failing.',\r\n        author: \"Richard P. Feynman\"\r\n    },\r\n    {\r\n        quote: 'Give a man a fire, and he\\'s warm for a night. Set him on fire, and he\\'s warm for the rest on his life.',\r\n        author: \"Terry Pratchett\"\r\n    },\r\n    {\r\n        quote: 'Don\\'t cry because it\\'s over.  Smile because it happened.',\r\n        author: \"Dr. Seuss\"\r\n    },\r\n    {\r\n        quote: 'The key to happiness doesn\\'t lay in numbers in a bank account but in the way we make others feel and the way they make us feel.',\r\n        author: \"Joe Rogan\"\r\n    }\r\n];\r\n\r\nexport default quotes","import quotes from \"./quotes\"\r\nimport randomColor from \"randomcolor\"\r\n\r\nfunction refreshIndex() {\r\n    return Math.floor(Math.random() * quotes.length);\r\n}\r\n\r\nvar index = refreshIndex();\r\nvar Quote;\r\n\r\nexport const quotesReducer = function(state = index, action) {\r\n\r\n    index = refreshIndex();\r\n\r\n    switch (action.type) {\r\n        case \"REFRESH_QUOTE\":\r\n            console.log(\"firstpass\")\r\n            Quote = quotes[index]\r\n            Quote.color = randomColor();\r\n            return Quote;\r\n        default:\r\n            Quote = quotes[state]\r\n            Quote.color = randomColor();\r\n            return Quote;\r\n    }\r\n};","import { createStore } from 'redux';\r\nimport { quotesReducer } from './quoteMachine/reducer';\r\n\r\nexport const store = createStore(quotesReducer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Button = styled.button`\r\n  cursor: pointer;\r\n  background: transparent;\r\n  font-size: 16px;\r\n  border-radius: 3px;\r\n  color: ${props => props.color};\r\n  border: 2px solid ${props => props.color};\r\n  margin: 0 1em;\r\n  padding: 0.25em 1em;\r\n  transition: 0.5s all ease-out;\r\n \r\n  &:hover {\r\n    background-color: ${props => props.color};\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst BackgroundDiv = styled.div`\r\n  margin:0;\r\n  padding:0;\r\n  background-color:  ${props => props.color};\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst QuoteContainer = styled.div`\r\n  margin:0;\r\n  padding:20px;\r\n  background-color: white;\r\n  text-align: center;\r\n  width: 50%;\r\n  border-radius: 20px;\r\n  font-family: 'Dancing Script', cursive;\r\n`;\r\n\r\nconst Quote = styled.h1`\r\nfont-size:56px;\r\n`;\r\n\r\nconst Author = styled.h2`\r\nfont-size:44px;\r\nfont-family: 'Indie Flower', cursive;\r\n`;\r\n\r\nconst LeftFontIconStyle = {\r\n  position: 'relative',\r\n  bottom: '1rem',\r\n  right: '1rem'\r\n}\r\n\r\nconst RightFontIconStyle = {\r\n  position: 'relative',\r\n  left: '1rem',\r\n  top: '1rem'\r\n}\r\n\r\nconst TwitterIconStyle = {\r\n  position: 'relative',\r\n  left: '1rem'\r\n}\r\n\r\nconst ToKnowMoreStyle = {\r\n}\r\n\r\nvar searchLink;\r\n\r\nexport class QuoteGenerator extends React.Component{\r\n    render() {   \r\n      searchLink = 'http://google.com/search?q='+ this.props.quote;\r\n      var tweetUrl = \"https://twitter.com/intent/tweet?text=\"+this.props.quote\r\n      return (\r\n        <BackgroundDiv color = {this.props.color}>\r\n        <QuoteContainer>\r\n        <Quote id=\"text\"><FontAwesomeIcon style={LeftFontIconStyle} icon={[\"fas\", \"quote-left\"]} size=\"xs\" />{this.props.quote}<FontAwesomeIcon style={RightFontIconStyle} icon={[\"fas\", \"quote-right\"]} size=\"xs\" /></Quote>\r\n          <Author id=\"author\">{this.props.author}</Author>\r\n          <Button id=\"new-quote\" onClick={() => this.props.handleRefreshClick()} color={this.props.color}>New Quote</Button>\r\n          <a id=\"search-quote\" href={searchLink} target=\"_blank\" style={ToKnowMoreStyle}>To Know more</a>\r\n          <a id=\"tweet-quote\" href={tweetUrl} target=\"_blank\"><FontAwesomeIcon style={TwitterIconStyle} icon={[\"fab\", \"twitter\"]} size=\"lg\" /></a>\r\n\r\n        </QuoteContainer>\r\n        </BackgroundDiv>\r\n      );\r\n    }\r\n  }\r\n\r\n  //https://stackoverflow.com/questions/44537810/pass-dispatch-to-onclick-event-redux","import { connect } from 'react-redux';\r\nimport { refreshQuote } from './actions';\r\nimport { QuoteGenerator } from './component';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        quote: state.quote,\r\n        author: state.author,\r\n        color: state.color\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        handleRefreshClick: () => dispatch(refreshQuote()),\r\n    }\r\n};\r\n\r\nexport const Container = connect(mapStateToProps, mapDispatchToProps)(QuoteGenerator);","export const REFRESH_QUOTE = \"REFRESH_QUOTE\";\r\n\r\nexport function refreshQuote() {\r\n    // console.log(\"REFRESH CALLED\");\r\n    return { type: REFRESH_QUOTE };\r\n}","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './configure-store';\r\nimport { Container } from './quoteMachine/container';\r\n\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nlibrary.add(fas);\r\nlibrary.add(fab);\r\n\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <Container />\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('quote-box')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}